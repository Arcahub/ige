@startuml Architecture

set namespaceSeparator ::
hide empty members
hide <<type>> circle

class Resources {
    + void set<T>(...)
    + Option<T&> get<T>()
    + Option<const T&> get<T>() const
}

class Entity {
    - Integer id
    - World& wld
    ....
    + void add_component<T>(...)
    + Option<T&> get_component<T>()
    + Option<const T&> get_component<T>() const
    + bool remove()
}

class NodeComponent {
    + void add_child(Entity)
    + void remove_child(Entity)
}
NodeComponent *-- "parent" Entity
NodeComponent *-- "0..* children" Entity

class System {
    + System(std::function<void(World&)>)
    ....
    + void run(World&)
}
Schedule *-- "0..*" System

interface State {
    + void on_start(App&)
    + void on_update(App&)
    + void on_pause(App&)
    + void on_resume(App&)
    + void on_stop(App&)
}

class StateMachine {
    + void switch<State>(...)
    + void push<State>(...)
    + Option<State> pop(...)
    + void quit()
}

StateMachine "1" *-- "0..*" State: Stack of >

class World {
    + Entity create_entity()
    ....
    - void add_component<T>(Integer, ...)
    - Option<T&> get_component<T>(Integer)
    - Option<const T&> get_component<T>(Integer) const
    - bool remove_entity(Integer)
}
note top of World: Entity container

map m_resources {
    StateMachine *-> StateMachine
    Storage<NodeComponent> *-> NodeComponent
    ... => ...
}
Resources ... m_resources

World *- m_resources

class Schedule {
    - Schedule(...)
    ....
    + void run(World&)
}

class ScheduleBuilder {
    + ScheduleBuilder& add_system(System)
    + Schedule build()
}
ScheduleBuilder ..> Schedule

class App {
    - Schedule m_init
    - Schedule m_update
    - Schedule m_cleanup
    ----
    + App(Schedule, Schedule, Schedule, State)
    ....
    + void start()
}

App *-- Schedule
App *-- World

class AppBuilder {
    + void on_init(Schedule)
    + void on_update(Schedule)
    + void on_stop(Schedule)
    + void start<State>(...)
}
AppBuilder ..> App

' Examples
namespace user {
    class ExampleState {
        + ExampleState()
        ....
        + void on_start(App&)
        + void on_update(App&)
        + void on_pause(App&)
        + void on_resume(App&)
        + void on_stop(App&)
    }

    ::State <|.. ExampleState

    class PhysicsSystem <<type>> {
        void(World& res)
    }
}

@enduml
