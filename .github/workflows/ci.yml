name: build + tests

on:
  pull_request:
  push:
    paths-ignore:
      - ".github/workflows/format.yml"
      - "**/docs/**"
      - "**/README.md"
      - "**/CHANGELOG.md"
      - "**/LICENSE"
      - "**/.gitignore"
      - "**/.clang-format"

jobs:
  pre-job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          cancel_others: true

  build-ubuntu:
    strategy:
      matrix:
        arch: [x64]
        mode: [debug, release]

    needs: pre-job
    if: ${{ needs.pre-job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest

    env:
      CC: gcc-10
      CXX: g++-10

    steps:
      - uses: actions/checkout@v2

      # Force xmake to a specific folder (for cache)
      - name: Set xmake env
        run: >
          echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >>
          $GITHUB_ENV

      # Install xmake
      - name: Setup xmake
        uses: xmake-io/github-action-setup-xmake@v1

      # Update xmake repository (in order to have the file that will be cached)
      - name: Update xmake repository
        run: xmake repo --update -v

      # Fetch xmake dephash
      - name: Retrieve dependencies hash
        id: dep_hash
        run: echo "::set-output name=hash::$(xmake l utils.ci.packageskey)"

      # Cache xmake dependencies
      - name: Retrieve cached xmake dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: >
            ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.mode }}-${{
            steps.dep_hash.outputs.hash }}

      # Configure
      - name: Configure
        run: xmake f -a ${{ matrix.arch }} -m ${{ matrix.mode }} -yv

      # Build
      - name: Build
        run: xmake -v

      # Run tests
      - name: Test
        run: xmake test

  build-epitest:
    strategy:
      matrix:
        arch: [x64]
        mode: [debug, release]

    needs: pre-job
    if: ${{ needs.pre-job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker

    env:
      XMAKE_ROOT: y

    steps:
      - uses: actions/checkout@v2

      # Install bzip2
      - name: Install dependencies
        run: sudo dnf -y install bzip2

      # Force xmake to a specific folder (for cache)
      - name: Set xmake env
        run: >
          echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >>
          $GITHUB_ENV

      # Install xmake
      - name: Setup xmake
        uses: xmake-io/github-action-setup-xmake@v1

      # Update xmake repository (in order to have the file that will be cached)
      - name: Update xmake repository
        run: xmake repo --update -v

      # Fetch xmake dephash
      - name: Retrieve dependencies hash
        id: dep_hash
        run: echo "::set-output name=hash::$(xmake l utils.ci.packageskey)"

      # Cache xmake dependencies
      - name: Retrieve cached xmake dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: >
            ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.mode }}-${{
            steps.dep_hash.outputs.hash }}

      # Configure
      - name: Configure
        run: xmake f -a ${{ matrix.arch }} -m ${{ matrix.mode }} -yv

      # Build
      - name: Build
        run: xmake -v

      # Run tests
      - name: Test
        run: xmake test

  build-windows:
    needs: pre-job
    if: ${{ needs.pre-job.outputs.should_skip != 'true' }}
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x64]
        mode: [debug, release]

    steps:
      - uses: actions/checkout@v2

      # Force xmake to a specific folder (for cache)
      - name: Set xmake env
        run: >
          echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File
          -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Install xmake
      - name: Setup xmake
        uses: xmake-io/github-action-setup-xmake@v1

      # Update xmake repository (in order to have the file that will be cached)
      - name: Update xmake repository
        run: xmake repo --update -v

      # Fetch xmake dephash
      - name: Retrieve dependencies hash
        id: dep_hash
        run: echo "::set-output name=hash::$(xmake l utils.ci.packageskey)"

      # Cache xmake dependencies
      - name: Retrieve cached xmake dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}\.xmake\packages
          key: >
            ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.mode }}-${{
            steps.dep_hash.outputs.hash }}

      # Configure
      - name: Configure
        run: xmake f -a ${{ matrix.arch }} -m ${{ matrix.mode }} -yv

      # Build
      - name: Build
        run: xmake -v

      # Run tests
      - name: Test
        run: xmake test
